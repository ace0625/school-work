------------------------------------------------------------------------------
CS 321 Winter 2016 Lab 5      Sample Solutions     Parsing Regular Expressions
------------------------------------------------------------------------------
This file documents sample solutions for the Week 5 lab exercises.

As a reminder, all of thes exercises have to do with the following grammar
for a simple language of regular expressions:

   regexp = "%"                  // matches the empty string
          | LETTER               // a single letter, a-z
          | regexp "|" regexp    // an alternative
          | regexp regexp        // a sequence of two regexps
          | regexp "*"           // a repetition (0 or more times)
          | "(" regexp ")"       // a parenthesized regexp

------------------------------------------------------------------------------
EXERCISE 1:
-----------
The tokens in the grammar, listed in the order that they appear above, are
as follows:

   Token    | Regular expression
   ---------+-------------------
   EMPTY    | "%"
   LETTER   | ["a"-"z"]
   OR       | "|"
   STAR     | "*"
   OPEN     | "("
   CLOSE    | ")"

------------------------------------------------------------------------------
EXERCISE 2:
-----------
A sample solution for this exercise is provided as a JavaCC program in
the file RegExpParser0.jj that is distributed with these notes.  This
program is based directly on early examples from the javacctour.  It
will read an arbitrary regular expression from the standard input and
output a corresponding list of token codes and images.

Use the following commands to compile this program:

   javacc RegExpParser0.jj
   javac  RegExpParser0.java

To run the resulting program, reading from the standard input, use:

   java   RegExpParser0

Alternatively, edit the supplied Makefile to set the PROG name to
RegExpParser0 and the use the commands "make", make "run", or
"make clean" to build the program, run the program, or clean up
(i.e., delete any temporary files that can be recreated by
rebuilding).  In general, you can move from one sample solution to
the next by running "make clean", then editing the PROG setting
in the Makefile, and then running "make run".

------------------------------------------------------------------------------
EXERCISE 3:
-----------
Writing "R" instead of "regexp" and L(X) to represent a LETTER token
with the specified character X as attribute, we can construct the parse
trees listed below for the examples in the question.  (NOTE: you should
read this document using a fixed width font to ensure that the diagrams
below appear correctly.

       R           R             __R__               __R__
       |          / \           /  |  \             /     \
     L("a")      R  "*"        R  "|"  R          _R_      R
                 |             |       |         /   \     |
               L("a")       L("a")   L("b")     R    "*"  L("b")
                                                |
                                              L("a")
      "a"         "a*"           "a|b"                 "a*b"


                   ___R___                  ___R___
                  /   |   \                /       \
                _R_  "|"   R      OR      R       __R__
               /   \       |              |      /  |  \
              R     R    L("c")         L("a")  R  "|"  R
              |     |                           |       |
           L("a") L("b")                     L("b")   L("c")
         
                  "ab|c"                      "ab|c"


            R                 ___R___               __R__
           / \               /       \             /  |  \
          R  "*"            R         R         "(" __R__ ")"
         / \               / \        |            /  |  \
        R  "*"           _R_  "*"   L("c")      "("   R   ")"
        |               /   \                         |
      L("a")           R     R                     L("a")
                       |     |
                    L("a")  L("b")

       "a**"                "(ab)*c"     