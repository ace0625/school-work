//-- Define a program that consumes tokens: ----------------------------------

PARSER_BEGIN(RegExpParser)

import regexp.*;

public class RegExpParser {
  public static void main(String args[]) throws ParseException {
      new RegExpParser(System.in);  // Read from standard input
      RegExp r = Top();
      System.out.println("Input syntax is valid");

      // Generate a dot version of the AST:
      r.toDot("ast.dot");

      // Make an accept state with no transitions:
      State done  = new State();
      done.accept = 1;
      done.trans  = new Transition[0];

      // Generate an NFA, and then a DFA:
      State[] nfaStates = r.toNFA(done).reachableStates();
      State[] dfaStates = State.toDFA(nfaStates);

      DotOutput.toDot(nfaStates, "nfa.dot");
      DotOutput.toDot(dfaStates, "dfa.dot");
  }
}

PARSER_END(RegExpParser)

//-- Define the grammatical rules of the input language: ---------------------

RegExp Top() : { RegExp r; } {
  r=R() <EOF> { return r; }
}

RegExp R() : { RegExp r, s; } {
   r=Seq() ("|" s=R() {r = new Alt(r,s);})?
   { return r; }
}

RegExp Seq() : { RegExp r, s; } {
   r=Rep() (s=Seq() {r = new Seq(r,s);} )?
   { return r; }
}

RegExp Rep() : { RegExp r; } {
   r=Atom() ( "*" {r = new Rep(r);}) *
   { return r; }
}

RegExp Atom() : { RegExp r; Token t; } {
  ("%"           {return new Epsilon();})
| (t=<LETTER>    {return new Char((int)t.image.charAt(0));})
| ("(" r=R() ")" {return r;})
}

//-- Define the lexical structure of an input language: ----------------------

// Input elements that should be ignored/skipped:
SKIP : { " " | "\t" | "\n" | "\r" }

// Lexemes that should be reported as valid tokens:
TOKEN : {
 <LETTER : ["a"-"z"]>
}

