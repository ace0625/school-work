//CS163
//Assignment #4
//Hyunchan Kim
/review_writeup.txt


1) How well did the data structure selected perform for the assigned application? 
2) Would a different data structure work better? If so, which one and why... 
3) What was efficient about your design and use of the data structure? 
4) What was not efficient? 
5) What would you do differently if you had more time to solve the problem?

In this program #4, the main data structure which is binary search tree is used to organize the 
concept information that are read from an external data file. The most important task is well 
the binary search tree is implemented. I tried to focus on building the binary search tree
more efficient. First of all, I tried to work on making the data structure much simpler and more modular. 
And secondly, I started with working on reducing the amount of manual copying and related actions that
happened in the main algorithms. There is a lot of separation between the binary search
tree and the actual data that is stored in it. All it really does is manage the nodes, 
and it simply calls functions that move the data around that interface with a class that
is stored in the nodes.
When I approached this problem, with the intent of making my program much more modular, 
I designed it such that the data was mostly handled in a separate function from the BST's function, 
so all of the deallocation (and allocation) is handled in a separate class for the data 
which greatly simplified the development of the ADT.
This data structure performs very well for the assigned application because it allows for 
the efficient storage of information, while also allowing it to be sorted extremely easily. 
I do not know of a data structure that would work better. This data structure was efficient 
because it allows for minimal traversal to get to data structure, and my design was efficient 
because it stored a second key in the nodes, so that when an item was wanted to be deleted, 
then it could be deleted without having to search the other trees (because there were two trees 
that were used, one that organizes by topic, and the other by course). In this specific application, 
it is not efficient because it actually stores two copies of the data, and if I had more time
to solve the problem, I would make it so that both trees pointed to the same data class, 
which would then eliminate some of the inefficiencies of the current implementation. 
Main Executing Function's algorithm:

	1. Display Choices to user
	2. Read in the user's choice
	3. Process the choice
		a. If the user wants to add an entry
			i. Read in the information for the topic
			ii. Insert the entry into both lists, directing the trees to place the 
			appropriate search key in the appropriate place.
		b. If the user wants to display a data
			i. Determine if the user wants to sort by key word or application name
			ii. Tell the correct tree to display in sorted order their contents
		c. If the user wants to delete an entry or delete from the tree
			i. Determine if the user wants to delete by key word or by app name
			ii. Send a request to the appropriate trees instructing them to delete the 
			appropriate entries.
		d. If the user wants to search for an application
			i. Determine if the user wants to search by key word or by app name
			ii. Read in the name of the search key
			iii. Search the relevant tree for the information, then return it to the client 
			program, which then outputs it.
		f. If the user chose to exit the function
			i.  Exit the loop
			ii. If they did not, continue to loop the function
			


			
There are a number of algorithms associated with the binary search tree.
	1. Insert new entry
		i. Determine, based on the passed number, whether the data that has been passed 
		should be inserted as a primary search key or as an alternate search key
			I. The originally called function then calls the addAtEnd function which then 
			adds the passed data to the end of the binary search tree, sorted based upon the
			primary search key (the alternate key that is not used, is still inserted so that
			it can be deleted later.
	2. Find by key word
		i. When this is called, this retrieves the matching data by key word
	3. Find by application name
		i. When this is called, this retrieves the matching data by application name
	4. Display all
		i. display all data in the binary search tree
	5. Remove all

